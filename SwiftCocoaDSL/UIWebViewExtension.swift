// UIWebViewExtension.swift
// the Code is generated by https://github.com/hhfa008/SwiftAI

import UIKit
extension UIWebView {
    @discardableResult
    func scalesPageToFit(_ scalesPageToFit: Bool) -> Self {
        self.scalesPageToFit = scalesPageToFit
        return self
    }

    @discardableResult
    func dataDetectorTypes(_ dataDetectorTypes: UIDataDetectorTypes) -> Self {
        self.dataDetectorTypes = dataDetectorTypes
        return self
    }

    @discardableResult
    func allowsInlineMediaPlayback(_ allowsInlineMediaPlayback: Bool) -> Self {
        self.allowsInlineMediaPlayback = allowsInlineMediaPlayback
        return self
    }

    @discardableResult
    func mediaPlaybackRequiresUserAction(_ mediaPlaybackRequiresUserAction: Bool) -> Self {
        self.mediaPlaybackRequiresUserAction = mediaPlaybackRequiresUserAction
        return self
    }

    @discardableResult
    func mediaPlaybackAllowsAirPlay(_ mediaPlaybackAllowsAirPlay: Bool) -> Self {
        self.mediaPlaybackAllowsAirPlay = mediaPlaybackAllowsAirPlay
        return self
    }

    @discardableResult
    func suppressesIncrementalRendering(_ suppressesIncrementalRendering: Bool) -> Self {
        self.suppressesIncrementalRendering = suppressesIncrementalRendering
        return self
    }

    @discardableResult
    func keyboardDisplayRequiresUserAction(_ keyboardDisplayRequiresUserAction: Bool) -> Self {
        self.keyboardDisplayRequiresUserAction = keyboardDisplayRequiresUserAction
        return self
    }

    @discardableResult
    func paginationMode(_ paginationMode: UIWebPaginationMode) -> Self {
        self.paginationMode = paginationMode
        return self
    }

    @discardableResult
    func paginationBreakingMode(_ paginationBreakingMode: UIWebPaginationBreakingMode) -> Self {
        self.paginationBreakingMode = paginationBreakingMode
        return self
    }

    @discardableResult
    func pageLength(_ pageLength: CGFloat) -> Self {
        self.pageLength = pageLength
        return self
    }

    @discardableResult
    func gapBetweenPages(_ gapBetweenPages: CGFloat) -> Self {
        self.gapBetweenPages = gapBetweenPages
        return self
    }

    @discardableResult
    func allowsPictureInPictureMediaPlayback(_ allowsPictureInPictureMediaPlayback: Bool) -> Self {
        self.allowsPictureInPictureMediaPlayback = allowsPictureInPictureMediaPlayback
        return self
    }

    @discardableResult
    func allowsLinkPreview(_ allowsLinkPreview: Bool) -> Self {
        self.allowsLinkPreview = allowsLinkPreview
        return self
    }
}
